<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dependency Injection | derjan]]></title>
  <link href="http://derjan.io/blog/categories/dependency-injection/atom.xml" rel="self"/>
  <link href="http://derjan.io/"/>
  <updated>2013-02-27T08:08:32+01:00</updated>
  <id>http://derjan.io/</id>
  <author>
    <name><![CDATA[Jan Ehrhardt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[There is no need for Spring in Scala code]]></title>
    <link href="http://derjan.io/blog/2012/11/27/there-is-no-need-for-spring-in-scala-code/"/>
    <updated>2012-11-27T04:26:00+01:00</updated>
    <id>http://derjan.io/blog/2012/11/27/there-is-no-need-for-spring-in-scala-code</id>
    <content type="html"><![CDATA[<p>Why are Java developers using Spring in so many applications? There
are plenty of reasons today, but one of the most important is to do
Dependency Injection. There are good reasons to do Dependency
Injection in your Java Code, but the most important is testing.</p>

<p><code>java
public class Butler {
  private final GreetingRepository greetingRepository = new GreetingRepository();
}
</code></p>

<p>When we want to write a unit test for the above code, there is no way
to mock our <em>GreetingRepository</em> variable. Dependency Injection solves
this problem, by putting the call of the constructor outside the
class. This allows us to inject a mock object in our unit tests.</p>

<p>```java
public class Butler {
  private final GreetingRepository greetingRepository;</p>

<p>  public Butler(GreetingRepository greetingRepository) {</p>

<pre><code>this.greetingRepsitory = greetingRepository;
</code></pre>

<p>  }
}
```</p>

<p>In our production code, we would probably use Spring or if we want to
be cool Google Guice to instantiate the <em>Butler</em> class and resolve
it's dependency. In Scala we would not!</p>

<p>Scala comes with a lot of language features we should miss in
Java. One is default values for parameters.</p>

<p><code>scala
class Butler(greetingRepository: GreetingRepository = new GreetingRepository()) {}
</code></p>

<p>Now our Scala butler can be instantiated in two ways. In our
production code, we simply use the constructor without
arguments. Scala will use the default value instead. In our unit
tests, we can instatiate the class and explicitly put a mock object in
the constructor call.</p>
]]></content>
  </entry>
  
</feed>
