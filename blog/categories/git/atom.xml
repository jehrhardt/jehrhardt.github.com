<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | derjan]]></title>
  <link href="http://derjan.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://derjan.io/"/>
  <updated>2012-10-27T12:17:09+02:00</updated>
  <id>http://derjan.io/</id>
  <author>
    <name><![CDATA[Jan Ehrhardt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs as default editor for Git]]></title>
    <link href="http://derjan.io/blog/2012/10/27/emacs-as-default-editor-for-git/"/>
    <updated>2012-10-27T12:17:00+02:00</updated>
    <id>http://derjan.io/blog/2012/10/27/emacs-as-default-editor-for-git</id>
    <content type="html"><![CDATA[<p>By default Git uses vi on Mac OS X. Since I am using Emacs as my
favorite text editor, I want to use Emacs for editing my commit
messages in Git too. I had just to run the following command:</p>

<p><code>
git config --global core.editor emacs
</code></p>

<p>The problem is, this will point Git to the Emacs coming with Mac OS X,
which is a very old version. Since I am using Emacs 24 through
<a href="http://mxcl.github.com/homebrew/">Homebrew</a>, I had to run the
following command instead:</p>

<p><code>
git config --global core.editor /usr/local/bin/emacs
</code></p>

<p>Now when I am committing with <em>git commit</em>, Emacs will be opend in my
Terminal. I can edit the commit message and as in any other editor
too, I save (<em>C-x C-s</em>) the message and close (<em>C-x C-c</em>) the
editor. Is the commit message empty, the commit will be abort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git as SVN client with multiple branches]]></title>
    <link href="http://derjan.io/blog/2012/10/25/git-as-svn-client-with-multiple-branches/"/>
    <updated>2012-10-25T10:45:00+02:00</updated>
    <id>http://derjan.io/blog/2012/10/25/git-as-svn-client-with-multiple-branches</id>
    <content type="html"><![CDATA[<p>If you are forced to use SVN, you can still use Git. Git is a great
<a href="http://blog.tfnico.com/search/label/git-svn">SVN client</a>. When your
SVN repository has multiple branches and you must work on them, Git
can also handle this.</p>

<p>First you must define a new SVN remote in your Git repository. When
you look into the file <em>.git/config</em>, you will find the following:</p>

<p>```
[svn-remote "svn"]</p>

<pre><code>    url = svn+ssh://my-svn-repo
    fetch = :refs/remotes/git-svn
</code></pre>

<p>```</p>

<p>This is the definition of the default SVN remote created by <em>git svn
clone svn+ssh://my-svn-repo</em>. You can simply add the following bellow
this default remote.</p>

<p>```
[svn-remote "svn-second-branch"]</p>

<pre><code>    url = svn+ssh://my-second-svn-branch
    fetch = :refs/remotes/git-svn-second-branch
</code></pre>

<p>```</p>

<p>This adds a new SVN remote named <em>svn-second-branch</em> once you have
fetched it with <em>git svn fetch svn-second-branch</em>, it will be
available in Git with the name <em>git-svn-second-branch</em>.</p>

<p>If you want to ckeck it out, run <em>git checkout git-svn-second-branch
-b my-local-branch</em>.</p>
]]></content>
  </entry>
  
</feed>
