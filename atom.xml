<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[derjan]]></title>
  <link href="http://derjan.io/atom.xml" rel="self"/>
  <link href="http://derjan.io/"/>
  <updated>2012-10-22T23:13:42+02:00</updated>
  <id>http://derjan.io/</id>
  <author>
    <name><![CDATA[Jan Ehrhardt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Successful DevOps keep their focus on applications]]></title>
    <link href="http://derjan.io/blog/2012/10/22/successful-devops-keep-their-focus-on-applications/"/>
    <updated>2012-10-22T22:51:00+02:00</updated>
    <id>http://derjan.io/blog/2012/10/22/successful-devops-keep-their-focus-on-applications</id>
    <content type="html"><![CDATA[<p>One of the most successful DevOps stories, you can find, are Platform
as a Service providers (PaaS). The companies behind
<a href="http://heroku.com">heroku</a>, <a href="http://www.appfog.com">AppFog</a> or
<a href="https://cloud.google.com/products/index">Google&#8217;s App Engine</a> found a
way to make operations a product. A product does not mean to sell
individual service plans to different customers. Instead they sell the
same standardized product to thounsands or even millions of customers.</p>

<p>The most interessting feature of PaaS is, that you simply deploy your
application to the cloud and scale it as you need. While developers
are using frameworks like <a href="http://rubyonrails.org">Rails</a> to create
new applications, deployment is also focused on applications.</p>

<p>If you are thinking about applying the DevOps idea to your own
company, you should learn from the PaaS providers. Think of DevOps as
making creation and deployment of new applications as easy as
possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We do not trust our unit tests]]></title>
    <link href="http://derjan.io/blog/2012/10/16/we-do-not-trust-our-unit-tests/"/>
    <updated>2012-10-16T07:33:00+02:00</updated>
    <id>http://derjan.io/blog/2012/10/16/we-do-not-trust-our-unit-tests</id>
    <content type="html"><![CDATA[<p>There is a simple rule, why we write unit test or better why we
should. Unit tests give us the required trust to refactor our
code. Changing code is the reason, why we test it. But many developers
do not trust their unit tests. They expect a wrong kind of trust, that
unit test can not supply. Time to change how we think about quality
and changing code.</p>

<!--more-->


<h2>The missing trust in units</h2>

<p>The trust developers want is a large one. They want to trust their
application as a whole.  They want to know changing a line of code
breaks the application. There is a good reason for this. If you write
a method in a class that is used in many places everywhere in your
code and you change a line in this method, you can break many parts in
your software.</p>

<p>The solution is to do tests on the highest reasonable level. In the
best case this level is the UI of your software. But UI tests are also
the slowest solution. They require a lot of things. You should run
them on all supported platforms or browsers. You should run them with
a real database and all these other services, that will be involved in
your production environment. All these things must be done for just
changing one line of code. You only trust in this probably simple
change, when the whole application is set up and its UI still does
what it should.</p>

<p>As you might guess there is a better solution. Unit tests should run
very fast.  You should run them as part of your development process
many times in a hour. But they simply test a simple method or class.
How can we trust them? How can we prove the application will not be
broken by changing code?</p>

<h2>Write testable code</h2>

<p>Many people try to tell us
<a href="http://derjan.io/blog/2012/08/31/dont-miss-to-write-good-unit-tests/">TDD</a> results in
testable code. But this is not true.  You first need to understand
what testable code really is. Testable code is written in a way, that
allows you to trust your unit tests. This includes testable code is
easy to test, but it means a lot more. Testable code is build of small
units with a well defined API. The API is defined by the unit tests
and the tests prove, the API works as expected.</p>

<p>A simple example. You have got a method, that is used all over your
code. It is invoked in hundreds of places. This might be good
sign. Your code is highly reusable. But having such a method means,
its API is used very frequently and changing the API has a big
potential to break your application. If you need to change this
method, try to keep its API stable. If you have good unit tests, you
can easily prove the stability.</p>

<p>A simple step to get code more testable is writting small classes
doing just a few things. Small classes are easier to test, but it is
also easier to keep there APIs stable. If classes have few
dependencies and small classes tend to have few dependencies, there
might be less potential side effects from other objects at
runtime. This will help you to make classes&#8217; APIs more stable.</p>

<p>If you write testable code, your code will become a big bunch of small
pieces each with a very stable API. If you make a change to your code,
it might affect just few places and hopefully it does not break your
internal APIs.</p>

<h2>What about the need of API breaks?</h2>

<p>Stable APIs are a good idea and you should pursue them. But sometimes
breaks are unavoidable. How can we deal with them?</p>

<p>A breaking API affects the users of the API. If your API breaks and
thus your existing tests have been changed, you need to work on the
users of the class or method too. Check their unit tests and write new
tests, if required to prove the API changes in the changed class do
not break their API. If their API also has been broken, go on and work
on their users too. Do this until you reach the point, where an API
keeps stable.</p>

<p>Testable code helps to deal with this. Breaking a classes API in a
testable code base does not affect the whole code. Instead it affects
just few classes or methods. If an API break also breaks the APIs of
the code&#8217;s users, the code base is not testable.</p>

<h2>Improve quality</h2>

<p>We have seen, what kind of trust unit tests can supply to us. Although
this trust does not work very well, when your code is not testable
improving your code&#8217;s quality writing testable code is a much better
way than doing all tests through the UI and let your code rot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discovery of Java Land]]></title>
    <link href="http://derjan.io/blog/2012/10/06/discovery-of-java-land/"/>
    <updated>2012-10-06T19:16:00+02:00</updated>
    <id>http://derjan.io/blog/2012/10/06/discovery-of-java-land</id>
    <content type="html"><![CDATA[<p>I am developing Java code for many years now and know how to do
this. But some years ago, I started to look what else happens in the
programming world. I figured out, that other developers are not just
using other programming languages, they are also using other tools and
come with another mindset. While I learned a lot about how others do
their work, I found more Java developers looking outsite the Java
world in the last months and they were wondering what happens
there. But why is the the Java world culturally so isolated, that even
experienced developers struggle with the tools everyone else uses?</p>

<!--more-->


<h2>Meeting the clash</h2>

<p>Over the last few years I have done a few or even more steps with
different languages. I have taken a look to
<a href="http://www.python.org">Python</a>, which was disillusioning. The
language was so unfancy and old, but of cause still useful. I did some
steps with <a href="http://www.ruby-lang.org">Ruby</a>, which was pretty
interessting. I played around with <a href="http://nodejs.org">node.js</a> and
<a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a>. And of cause I
did some <a href="http://www.scala-lang.org">Scala</a> and
<a href="http://groovy.codehaus.org">Groovy</a>. But my personal favorite is
<a href="http://clojure.org/">Clojure</a>. I learned programming with
<a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>
and thus using a
<a href="https://en.wikipedia.org/wiki/Lisp_programming_language">Lisp</a> on the
<a href="https://en.wikipedia.org/wiki/Java_virtual_machine">JVM</a> could not
feel more natural to me.</p>

<p>But Clojure looks more interessting, when you see the people using
it. They are not just Java programmers. They are coming from different
languages and cultures. I see Ruby and Python developers hacking
Clojure as well as Java developers and even old Lisp fans. But this
brings together two programming cultures, that could not be more
different.</p>

<h2>IDE vs text editor</h2>

<p>Java is not fun with all this boiler plate code. To make such a
language usable, you will need a good tool. Not a good text editor, a
really heavy tool, that does so much more. I am sure, I would not
write Java code, if I had not a powerful
<a href="http://www.jetbrains.com/idea/">IDE</a>.</p>

<p>But as I have written my first lines of Ruby some years ago, I figured
out, that programming in a text editor could work pretty well. I do
not know how many Ruby or Python developers use an IDE, but none I
personally know. I know many of them using vi or
<a href="http://www.vim.org">vim</a> and some using
<a href="http://www.gnu.org/software/emacs/">Emacs</a> like
<a href="https://github.com/jehrhardt/prelude">me</a>. But none of them is using
an IDE.</p>

<p>Since I know how useful IDEs are for coding Java, I also know how
useless they are for coding Ruby or of cause Clojure. To me my Emacs is
the perfect tool to writting Clojure code. A brief look to the Clojure
community shows, I am not alone with this. But a brief talk to some
Java developer shows, how much he is tied to his IDE.</p>

<p>Some might simply be not comfortable with a text editor, which is
ok. But some even do not understand, that there are languages, that
are more usable than Java and thus create no need for an IDE.</p>

<h2>IDE vs Terminal</h2>

<p>Some years ago as I first tried a new build tool for Java projects
called <a href="http://gradle.org">Gradle</a>, it was not possible to get the
tool into real projects. There was a simple reason: the IDE!</p>

<p>Gradle had a bad IDE integration and thus there was no way to use
it. Gradle was cool and did some nice things, but it did not work well
with the IDE.</p>

<p>In the Ruby world I did not find somthing similar. New tools are tried
out by others very quickly, since everone uses a
<a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal</a>. And tools
are provided mostly with a termial interfaces. It looks like the
Clojure community is more like the Ruby community than the Java
community. Most projects use <a href="http://leiningen.org">Leinigen</a> instead
of <a href="https://maven.apache.org">Maven</a>, which also allows to do
Clojure. Many already use Leinigen 2, which has not been released yet.</p>

<p>I know Java developers, who execute Maven goals with a mouse click
from their IDE and not from the Terminal. They do not use a library
for unit testing, that is not supported by their IDE. They do nothing,
without their IDE.</p>

<p>The companies making money with Java tools have done a very good
Job. They have created a generation of developers that do not know how
to use a powerful command line tool. They have made all the quirky
stuff in the Java world useable by hiding the command line instead of
creating better tools. The Java developers are now addicted.</p>

<h2>Static vs dynamic typing</h2>

<p>There is this one big argument, a Java developer will have, why he
still believes in Java: static typing. Java&#8217;s static type system is
not very powerful. It is not very flexible. It is a pain. But to a
Java developer it is the core feature, since there are no others.</p>

<p>Static typing allows the Java IDEs to provide a lot of
information. IDEs show you what a method returns and what methods
could be invoked on the result. Beside this results in massive
violations of the
<a href="https://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a>, it is
just another reason, why Java developers are addicted to their
IDEs. They simply do not know how to learn somthing about an API
without seeing the invokable methods in the IDE.</p>

<p>A good library comes with a good documentation and with examples. In
the best case there are a lot of tests, that provide you the best
sample code to learn how to use the library. You can also clone the
repository and take a look to the code. On the other hand libraries
without good documentation are hard to use and thus people do not use
them. This is how to become comfortable with a new library. You must
understand what it does and how to use it.</p>

<p>Most languages also provide a console or interactive mode. In Clojure
or other Lisps it is called
<a href="http://clojure.org/getting_started">REPL</a>. This is a great way to
figure out how to use an API. You simply try it. But in the Java
world, there is nothing similar, so developers cannot work without the
information from the IDE.</p>

<p>This might be the hardest point to understand for a Java
developer. You can be very productive, without an IDE that shows you
what methods you can invoke on an object. You can simply know it, read
it or try things out.</p>

<h2>The discovery has started</h2>

<p>The world could be fine with IDE addicted Java developers isolated
from the innovative rest. But with Clojure the game has
changed. Clojure seems to be the gate for developers from other
programming languages to the Java world. More than
<a href="http://jruby.org">JRuby</a> it opens the JVM for people, who do not need
an IDE.</p>

<p>But Java developers must not struggle. They can do Clojure with Maven
and some IDE plugin to learn the language. That might be the red pill!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links, URLs and URNs to identify entities in RESTful APIs]]></title>
    <link href="http://derjan.io/blog/2012/09/17/links-urls-and-urns-to-identify-entities-in-restful-apis/"/>
    <updated>2012-09-17T23:30:00+02:00</updated>
    <id>http://derjan.io/blog/2012/09/17/links-urls-and-urns-to-identify-entities-in-restful-apis</id>
    <content type="html"><![CDATA[<p>Modern APIs are <a href="https://en.wikipedia.org/wiki/REST">RESTful</a>. It is a
good idea, since REST is based on the main principles of the
<a href="https://en.wikipedia.org/wiki/WWW">WWW</a> like
<a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a> and
<a href="https://en.wikipedia.org/wiki/URL">URLs</a>. URLs allow browsers to
identify resources.</p>

<p>But how are you dealing with URLs in your API? Are you telling your
users how to create URLs?  And what is about navigation?  Do your
users know how to navigate through the data your API offers? Knowing
some basic priciples might improve your APIs a lot.</p>

<!--more-->


<h2>Starting small</h2>

<p>Most applications start small. So let us look at a simple example a
photo album application. Everytime a user opens the URL of a photo
album in his browser, a HTML page is loaded. In this case, the page
might contain thumbnails of all the photos from the album. The
thumbnails might be hyperlinks pointing to the URL of the image
details. If the user clicks on the thumbnail a new HTML page opens
with a bigger view of the picture and probably more information about
it.</p>

<p>This simple case contains a really powerful concept - hyperlinking. If
we want to provide a mobile app to our users or an API for third party
developers, we should adapt this awesome concept to our API.</p>

<p>In JSON based formats hyperlinks can be put into an attribute called
links, which is an array of link objects. This might look like below.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Cool picture&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;rel&quot;</span><span class="p">:</span> <span class="s2">&quot;details&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;href&quot;</span><span class="p">:</span> <span class="s2">&quot;https://example.org/albums/12/photos/13&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A mobile app can also show the thumbnails and store locally the URL
from the link object. When the user tabs with his finger on the image,
the app can do the same as the browser does. It can simply follow URL
from the link to show the image details.</p>

<h2>The power of links, when you grow</h2>

<p>Hopefully our service is growing and a simple monolithic web
application with a MySQL database does not work anymore. So we are
starting to store our image files and metadata in a different
application highly optimized to store masses of photos. This is where
hyperlinking shows it&#8217;s real power.</p>

<p>Our new photo storage application might provide URLs with a completely
different structur. The URLs even might point to a different subdomain
as our web application. While the image tags in our HTML contain other
URLs, the browser does not care about any change at this point.</p>

<p>Different to the browser, the JSON for our mobile app might now be
served partially by the photo storage application. This is possible,
since the app does not know anything about the URL. It just gets it
from a link object in the JSON document.</p>

<h2>Where hyperlinking does not fit anymore</h2>

<p>Although hyperlinking allows clients to behave similar to browsers and
thus become more independent of URL structurs, this concept is
limited. It works well, when the client has a temporary local state,
where the links are stored.</p>

<p>When a user now opens the URL of a photo album in the browser, how
does the photo album application on the server know, which thumbnail
URLs it should put to the image tags? The applications could store
some redundant data, that allows some mapping. Or the album
application might store the URLs to the photos in the storage
application. Both are no good solution to the problem.</p>

<p>The problem lies in the URLs, since the L is for location, an URL does
not identify an entity of our application, it identifies a location,
where the entity can be found. Well it is an easy task to create
different URLs all pointing to the same entity. But how can entities
be identified in RESTful APIs? Even across different applications or
companies?</p>

<p>There are two classes of
<a href="https://en.wikipedia.org/wiki/URI">URIs</a>. URLs are one of them and
<a href="https://en.wikipedia.org/wiki/Uniform_Resource_Name">URNs</a> are the
other. The N in URN is for name and thus a URN is a name or better an
identifier for an entity. In a JSON format simply place the URN into
an id attribute for the object. The client can now store a global
identifier, that works location independent.</p>

<p>Using a URN like <em>urn:my-company:photo:13</em> allows us to store an id
for each photo from the storage application in the album&#8217;s
database. At same time we can define a simple mapping between URNs and
URLs using <a href="http://tools.ietf.org/html/rfc6570">URI templates</a>.</p>

<p>Using ids is not as smart as hyperlinks, but with URNs they can be
handled also pretty well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applying the test automation pyramid to the real world]]></title>
    <link href="http://derjan.io/blog/2012/09/11/applying-the-test-automation-pyramid-to-the-real-world/"/>
    <updated>2012-09-11T07:47:00+02:00</updated>
    <id>http://derjan.io/blog/2012/09/11/applying-the-test-automation-pyramid-to-the-real-world</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://derjan.io/media/test-pyramid-fowler.png" width="373" height="540" title="Test Pyramid by Martin Fowler" alt="Test Pyramid by Martin Fowler"></p>

<p>You probaply heard of the test automation pyramid, which is a great
idea to make automated testing work in an agile development
environment. The image copied from <a href="https://twitter.com/martinfowler">Martin Fowler</a> shows it. He has also
<a href="http://martinfowler.com/bliki/TestPyramid.html">explains the pyramid</a>
pretty well.</p>

<p>The pyramid has three layers UI, Service and Unit tests. Theses layers
map well to standard web applications.  But in more complex systems
this simple model does not fit exactly at first view. But that is not
true. It fits perfectly, if you understand it right.</p>

<!--more-->


<h2>What is wrong with the real world?</h2>

<p>The test automation pyramid is created with web applications in
mind. Think of a simple monolithic LAMP or Rails application. All the
code is on the same server. In this case the idea of the pyramid fits
perfectly, since we have an UI and a monolithic application.</p>

<p>In the real world, the situation differs a lot. Many applications do
not have an UI at all. They might be so called backend services, which
provide some logic, that works somewhere in the backround. The UI part
of the software system is is probably written in a language like
<a href="http://www.ruby-lang.org">Ruby</a>, while the backend services - maybe
written in <a href="http://openjdk.java.net">Java</a>,
<a href="http://www.scala-lang.org">Scala</a> or <a href="http://clojure.org">Clojure</a> -
are accessed through HTTP. But how do you apply the pyramid?</p>

<h2>What is wrong with the pyramid?</h2>

<p>The problem comes from the miss leading names of the layers in the
pyramid. E. g. the top layer is called UI tests and our backend
application has no UI. Sure there is hopefully an UI application, that
access our backend service and has UI tests, but is that enough?</p>

<p>The solution is a simple renaming of the layers. Let us call the top
layer <em>function tests</em> instead of UI tests. This name also applies well
to non GUI applications. The tests in this layer should be very
similar to UI tests.</p>

<h2>Testing an application works</h2>

<p>The <em>functional test</em> layer on top should prove the application
works. This means, you have at least to start your application
and access it through some mechanism similar to your production
environment. In the best case your application will be deployed to a
real server with a real database. Everything like authentication or
access over the network should happen in a function test the same way
it does in a production environment.</p>

<p>While the infrastructural requirements for theses tests are high and
the tests itself might run very slow, there should be only few test
cases in this category. You should not test failures here or some edge
cases. Simply make sure your application is deployed, can access the
database and answers as expected to some requests.</p>

<p>This kind of definition works for backend applications as well as for
UI applications. UI tests are just a special form of functional
tests. If you have both an UI application with UI tests and a backend
service, your UI tests should run end to end, which also includes your
backend services. In addition your backend service can also have its
own functional tests, doing some basic HTTP requests. So you end up
with functional tests on different layers of your system.</p>

<p>An important point is to know, that developers might not run theses
test very frequently on their own local machines. But this is ok as
long as some continous integration server will run them regularly.</p>

<h2>Testing your application behaves correctly</h2>

<p>When <em>functional tests</em> do not test the correct behaviour of your
application, you need another layer to this. In the test pyramid the
<em>service test</em> layer does this job.</p>

<p>Different to functional tests developers should run service tests very
frequently. Thus the tests must execute fast enough to do
this. Starting a Java EE application server might be much to slow for
this. So service tests should skip this. Instead they should be
written similar to unit tests, using a tool like Junit and
instantiating objects from your code.</p>

<p>But what should be tested exactly? A good service test runs a
typical scenario, that might appear similar in production. So take a
typical conversation with your application and write it down in your
test case. You should make sure, you focus on positive tests and skip
error handling and edge cases at this level.</p>

<p>Service tests should make sure, the parts of your code work together
as expected and behave like they should. This includes integration
with third party libraries and even persistence. But always keep it
simple. Use a simple database like <a href="http://www.sqlite.org">SQLite</a> or
<a href="http://www.h2database.com">H2</a> instead of a full blown database
server. Use simple HTTP mocks with static JSON files instead of real
services in the backend. Keep your infrastructure as lean as possible
to make running the tests easy.</p>

<h2>Testing your code</h2>

<p>A <em>unit test</em> should be executable as fast as possible. If some
framework needs some seconds to initialize, skip it in the unit
tests. Make your tests as fast as possible. There is a simple reason
for this performance requirement. Developers should not run unit tests
just frequently, they should run them as often as possible. You
changed a line of code? Run the tests! This is how it should work and
thus performance matters a lot.</p>

<p>Since unit tests should be very fast, it is cheap to run them, but it
is also cheap to test edge cases and failure handling in unit
tests. If your application should be able to deal with null values,
unit tests are the place to prove it. If your application should
validate some data, unit tests are the place to prove it. If your
application should apply an algorithm, unit tests are the place to
prove it.</p>

<p>Unit tests can do
<a href="http://derjan.io/blog/2012/08/31/dont-miss-to-write-good-unit-tests/">much more</a>. They
can help other developers to understand your code and its behaviour
better. They can help you to change your code, without fearing to
break it. And they can help you to find errors in the code, when they
fail.</p>

<h2>When should your tests run?</h2>

<p>Unit tests can be found near the production code. In multi module
projects, each module will have its unit tests. Most tools like Maven
or Gradle in the Java world or Rake in the Ruby world will run the
unit test by default, so there should be no probem for your continous
integration server. Java IDEs have also integration for common test
frameworks.</p>

<p>Little harder is to run service tests. They might be much slower than
unit tests, so there should not be so much test cases to
run. Important is, that a standard build like <em>gradle build</em> or <em>mvn
clean package</em> will run theses tests. After all modules have been
compiled, all unit tests should be executed. Now it is time to run the
integration tests. They prove, the standard interaction with your
software works well. Integration tests can be placed in a separate
module to make this work best. But at least keep them separated from
your unit tests to reduce problems.</p>

<p>The hardest part are the functional tests. Since their primary goal is
to prove, the software runs and works as expected, there is no reason
to execute them all the time as part of the standard build. Instead
you should make theses tests easily executable without building the
whole software. It is great, when a continous integration server
deploys the software on a test machine with a real database, real HTTP
and real authentication and than runs the functional tests against
this system.</p>

<h2>Other ways</h2>

<p>Sure this is one solution to the problem and you may have found
another way to work with different test levels. What do you think?
How did you solve this? What worked great? What was bad? Leave me a
comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't miss to write good unit tests]]></title>
    <link href="http://derjan.io/blog/2012/08/31/dont-miss-to-write-good-unit-tests/"/>
    <updated>2012-08-31T10:46:00+02:00</updated>
    <id>http://derjan.io/blog/2012/08/31/dont-miss-to-write-good-unit-tests</id>
    <content type="html"><![CDATA[<p>It is not enough for today&#8217;s software developers to know their
programming language well. There are further skills, that more and
more companies are expecting from there employees. One of the most
important is
<a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a>
(TDD). This is not an introduction to TDD. If you want to learn it, I
recommend <a href="https://twitter.com/unclebobmartin">Uncle Bob&#8217;s</a> awesome
<a href="http://www.cleancoders.com/">Clean Code Videos</a> (Episode 6 - TDD) or
simply <a href="https://www.google.com/search?q=tdd+tutorial">ask Google</a> for
it. But many developers are writing bad code and applying TDD does not
make them writing good code. Instead it makes them also writing bad
tests. So this is about writing better test code.</p>

<!--more-->


<h2>Applying simple rules</h2>

<p>To understand why test code can be bad, you should understand, what it
should do. It should work as the parachute, that keeps you alive, when
refactoring your code. Tests may help you to be sure nothing breaks,
when adding new features to your code. But tests may also work as
sample code, that documents your APIs better than any other
documentaion except the code itself.</p>

<p>But how can you make your tests better? It might help to follow some
simple rules, that could be easily applied to every language or test
style like BDD or Junit-style.</p>

<h2>Tests should be a state machine</h2>

<p>Many people do not like BDD at all, but there is a pretty nice idea in
it - the given-when-then style some frameworks promote. This style
forces you into a way of thinking about tests, that you should adapt.
Even if you do not use a BDD framework.</p>

<p>Writing a test this way means there is a start state, something
happens and than an end state is reached. If your test is broken, the
state machine in it is broken. In BDD frameworks the first part of
your test is the <em>given</em> block, where all the setup stuff is done. The
second part is the <em>when</em> block, where an action is applied on the
test object, created in the given block. At least you have a <em>then</em>
block, where you assert, that the correct end state is reached.</p>

<p>It is very helpful to have this in mind while writing a new test. Keep
these three parts seperated and do not mix them in some way. Do not
write code in your test, where an <em>if</em> appears, or even more complex
logic. In a test you should only do the above three steps. Do some
simple setup, call a method on your test object or invoke the test
function and assert the result is correct.</p>

<p>This might also make your code better. If you write messy code, tests
written this way are harder to create and maintain. If you have to
much of inheritance, dependencies on other objects or resources like
IO, you will have to set it up in every test you write and that is no
fun. But you should write your tests first and hopefully it makes
writing messy code harder, if you have written a well structured tests
first.</p>

<h2>Tests should be good examples for using your API</h2>

<p>Every code you write has an API. If your application has a graphical
user interface or it is an open source library, there is some way it
is used by others. If some other developer is changing your code, or
working with you in the same team, there is an API for each class or
function in the whole code. You can write documentation like JavaDoc
on every public method, but this tends to be out of date, since many
developers miss to update it when they change the code.</p>

<p>A better way of technical documentation for source code are code
snippets, that show how to use a class or function. But many
developers do not have this in mind, while writing tests. That is sad,
because tests use your code and should be executed frequently. So they
are already working code samples.</p>

<p>Before you write a test, you should first think about how someone
wants to use your code. How should your methods be named? What
parameters do users want to pass to it? What do they expect as a
result? The next step might be writing a test, that simply shows, how
a user would call your code. Does it look well? Is it simple or
complex? Could it even look simpler? Once your test defines the API,
write the code to make it green.</p>

<p>If you have done your job well, someone looks to your tests and
understands how to use your code. This documentation does not outdate
as long as all tests are executed frequently. If it outdates, it will
hopefully break your build.</p>

<h2>Tests should have meaningful assertions</h2>

<p>Do you write debug logging statements in your code? Why are you doing
it?</p>

<p>Most developers want to know, why their code fails and this is, where
debug logging comes in. If you write good tests for your code, you
should know, that your code behaves as it should, because it is
verified by the tests. So there is no need for debug logging
anymore. But what happens, if you change some code and break some
other code by this change? In the best case some test will fail, but
you do not know why.</p>

<p>This is where assertion come in. You should spend some time in
learning how assertions in your test framework realy work. You should
figure out, if there are open source libraries, that could improve
assertions in your tests, like
<a href="https://github.com/alexruiz/fest-assert-2.x/wiki">fest</a> does in the
Junit or <a href="http://spockframework.org">Spock</a> does for Java at all.</p>

<p>The most important work assertions should do is telling you why a test
has failed. In the best case it prints the expected value and the
actual value and shows you how they differ. This might help you to
figure out, what is wrong with your code. And might do this much
better than any debug logging.</p>

<h2>Reaching the next level of TDD</h2>

<p>As you can see, it is not enough to learn how to do TDD. You should
also learn how to write good tests. The above rules are not simple to
apply, but might improve your test code&#8217;s quality. At all they may
help you reaching the next level of TDD and the next level of writing
source code. You should start to apply them as soon as possible to
make your test code much cleaner.</p>

<p>There are a lot more good techniques to improve TDD. Tell me about
them in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be fair to Scala, do not expect a better Java]]></title>
    <link href="http://derjan.io/blog/2012/08/27/be-fair-to-scala/"/>
    <updated>2012-08-27T12:43:00+02:00</updated>
    <id>http://derjan.io/blog/2012/08/27/be-fair-to-scala</id>
    <content type="html"><![CDATA[<p>To some Java developers Scala has become an alternative to Java as a
programming language. So they started learning it and do the first
steps in writing some Scala code. To most of them the next step might
be the first contact with a Scala library and hopefully a Scala test
framework. But right after the first contact, I here them
screaming. Oh my god, this library uses all the tricky features Scala
comes with. Do the developers not care about readability?</p>

<!--more-->


<h2>Some lines of Scala code</h2>

<p>What is the problem in Scala? To understand it, lets take a brief look
to some Scala code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">App</span> <span class="k">with</span> <span class="nc">PathConversion</span> <span class="k">with</span> <span class="nc">StringConversion</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Files</span><span class="o">.</span><span class="n">write</span><span class="o">(</span><span class="s">&quot;log&quot;</span><span class="o">,</span> <span class="s">&quot;Hello world\n&quot;</span><span class="o">,</span> <span class="nc">APPEND</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code appends a line to a file. It uses the
<a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/package-summary.html">new file API</a>
introduced in Java 7 to do this.</p>

<p>The
<a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#write(java.nio.file.Path,%0Abyte[],%20java.nio.file.OpenOption...)">write</a> method only accepts a
<a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html">Path</a>
object and a byte[] as parameters. The trick is done in the traits
<em>StringConversion</em> and <em>PathConversion</em>, which provide implicit
methods to convert Strings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">StringConversion</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">bytes</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">text</span><span class="o">.</span><span class="n">getBytes</span><span class="o">(</span><span class="nc">Charsets</span><span class="o">.</span><span class="nc">UTF_8</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">PathConversion</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">stringAsPath</span><span class="o">(</span><span class="n">path</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Paths</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">path</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The methods in the traits are called implicit, thus the compiler will
create byte code, that calls these methods. But these calls are not
written expilcitly in the code.</p>

<h2>What Java developers do not like</h2>

<p>The above code snippets are using a nice features, that Scala provides
and that Java does not. But when Java developers start using Scala,
they often look at it as a better Java and thus they expect to use
their existing skills.</p>

<p>One problem are the implicit calls to methods. In the Java world
static typing is not just used for type checking at compile time. It
is also used as an implicit type documentation. So a Java developer
would look at the signature of the write method and see that it only
accepts objects of type Path and byte[] as parameters. But a look to
the method call shows, that Strings are passed to it.</p>

<p>From a Java developer&#8217;s point of view, this is not easy to understand.
Where is this implicit conversion of types done? A Java developer
might think, this reduces readability. But this is not true.</p>

<h2>It is not Scala&#8217;s fault</h2>

<p>Scala is not a better Java. It is a completely different language. As
any other language too, Scala also has a community around it. There
are libraries and APIs designed for Scala and they are using the
features of the language. This is exactly how it should be.</p>

<p>The way a developer works with Java is not the way a developer works
with Ruby or Python or even JavaScript. Many Ruby developers use a
text editor instead of a fat IDE, while Java without any IDE is really
painful. Using the declared types of method parameters to figure out,
what you can pass into this method is also a Java way of working. In
Ruby, Python or JavaScript, there are no declared types. There is even
no type checking at compile time. But people know how to use methods
and classes in these languages as well.</p>

<p>Scala&#8217;s type system is very powerful, while Java&#8217;s is not. It allows
you to do things like the above and it is good, when Scala developers
are using these features in their code and APIs. But the power of
Scala&#8217;s type system makes it also complex. The compiler can check the
types, while the developer may not understand them easily from the
method signature.</p>

<h2>Learn to work the Scala way</h2>

<p>There is only one solution to this problem. Java developers must learn
how to work with a language, that has a type system different from
Java&#8217;s. They have to change their mind and extend their skills.</p>

<p>Well, if you do not get comfortable with this, Scala is not your
language. Take your hands off and go home to your Java code.</p>

<p>What do you think? How do you solve the parameter documentation in
your favorite programming language? And how do you figure out how to
use a method?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps with Groovy's invokedynamic support]]></title>
    <link href="http://derjan.io/blog/2012/08/08/first-steps-with-groovys-invokedynamic-support/"/>
    <updated>2012-08-08T07:29:00+02:00</updated>
    <id>http://derjan.io/blog/2012/08/08/first-steps-with-groovys-invokedynamic-support</id>
    <content type="html"><![CDATA[<p>It is not really new, but
<a href="http://docs.codehaus.org/display/GROOVY/2012/06/28/Groovy+2.0+released">Groovy 2.0 is out</a>.
There is even a version
<a href="http://docs.codehaus.org/display/GROOVY/2012/06/28/Groovy+2.0+released">2.0.1 released</a>,
which only fixes some bugs. One of the new features introduced with
version 2.0 is support for invokedynamic. But it is not used by
default, instead you have to activate it. But there is only few
documentation and it is spread over the web. So how do we use
invokedynamic in our code?</p>

<!--more-->


<h2>Get your machine ready</h2>

<p>First of all you should have installed
<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java 7</a>,
since invokedynamic is not available in earlier versions of Java. The
easiest way to test invokedynamic support is by using the command
line, so should also have installed
<a href="http://groovy.codehaus.org/Download">Groovy 2.0</a> or later.</p>

<p>Having Groovy installed you could simply use it with the <em>groovy</em>
command in your terminal, but a different way, you should be familiar
with is to compile Groovy code with <em>groovyc</em> to Java byte code. The
byte code can be executed with <em>java -classpath</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -O HelloWorld.groovy https://raw.github.com/gist/3292829/f9d2a37c6cdc45570aab1bf0ce665262899a0dde/HelloWorld.java
</span><span class='line'>groovyc HelloWorld.groovy
</span><span class='line'>java -classpath .:<span class="nv">$GROOVY_HOME</span>/embeddable/groovy-all-2.0.1.jar HelloWorld
</span></code></pre></td></tr></table></div></figure>


<p>These steps are pretty similar to my
<a href="https://gist.github.com/3292829">first steps with Java</a> years ago and
they are necessary to do your first steps with invokedynamic. But at
this time there is no invokedynamic involved.</p>

<h2>Two steps to use invokedynamic</h2>

<p>The first step on our way to invokedynamic is using the right Groovy
JAR, while executing our byte code. In <em>$GROOVY_HOME/embeddable/</em> you
can find <em>groovy-all-2.0.1-indy.jar</em>, where indy is short for
invokedynamic. This JAR contains a version of Groovy, that uses
invokedynamic instead of Groovy&#8217;s very own old dynamic invoking code.</p>

<p>Using the indy JAR is not enough, since everything should still work
under Java 5 or 6, even this JAR is used. The byte code created by
Groovy compiler is not using any Java 7 features. So the second step
is to tell the <em>groovyc</em> command to compile our Groovy code using
invokedynamic by adding the <em>&#8211;indy</em> flag. The above sample should now
look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -O HelloWorld.groovy https://raw.github.com/gist/3292829/f9d2a37c6cdc45570aab1bf0ce665262899a0dde/HelloWorld.java
</span><span class='line'>groovyc --indy HelloWorld.groovy
</span><span class='line'>java -classpath .:<span class="nv">$GROOVY_HOME</span>/embeddable/groovy-all-2.0.1-indy.jar HelloWorld
</span></code></pre></td></tr></table></div></figure>


<h2>Make your Groovy 2.0 indy</h2>

<p>Running the above code will fail at second command with a curious
exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>groovy.lang.GroovyRuntimeException: Cannot use invokedynamic, indy module was excluded from this build.
</span></code></pre></td></tr></table></div></figure>


<p>What went wrong? Didn&#8217;t I use Groovy 2.0? Didn&#8217;t I pass the <em>&#8211;indy</em>
flag correctly? The
<a href="http://permalink.gmane.org/gmane.comp.lang.groovy.devel/26698">solution</a>
is simple, once you understand your Groovy installation. The Groovy
JARs used by <em>groovyc</em> are in <em>$GROOVY_HOME/lib/</em>, but the indy JARs
are in <em>$GROOVY_HOME/indy/</em>. So replace the Groovy JAR with the indy
version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$GROOVY_HOME</span>
</span><span class='line'>cp -R lib lib.org
</span><span class='line'>cp indy/groovy-2.0.1-indy.jar lib/groovy-2.0.1.jar
</span></code></pre></td></tr></table></div></figure>


<p>Now the above sample should work, but it really looks like the Groovy
developers do not want you to use invokedynamic. They made it as
difficult as possible, but why?</p>

<h2>Loosing previous optimizations with invokedynamic</h2>

<p>The Groovy developers have spent a lot of time to get Groovy&#8217;s runtime
faster. One great step was the primitive optimization introduced with
Groovy 1.8. But these optimizations are not available if everything is
delegated to the JVM, what happens with invokedynamic.</p>

<p>You can test it using a simple
<a href="https://gist.github.com/3293383">Fibonacci sample</a>. Running the
sample on my machine with <em>fibonacci(42)</em>, the result looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Java: 1.43s
</span><span class='line'>Groovy 1.8 or 2.0: 3.08s
</span><span class='line'>Groovy 2.0 with indy: 6.55s
</span></code></pre></td></tr></table></div></figure>


<h2>It&#8217;s just the first step for Groovy</h2>

<p>It is good for Groovy to support invokedynamic, but the support is not
ready yet. Some code might benefit from it, but other does
definitively not. The JVM currently does not support all optimizations
the Groovy runtime already does.</p>

<p>Making the usage of invokedynamic difficult hopefully prevents people
from using it without knowing about the impacts. So we&#8217;ll see, how
well Groovy and invokedynamic will work together in future versions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring and JSR 330 scopes]]></title>
    <link href="http://derjan.io/blog/2011/10/18/spring-and-jsr-330-scopes/"/>
    <updated>2011-10-18T07:09:00+02:00</updated>
    <id>http://derjan.io/blog/2011/10/18/spring-and-jsr-330-scopes</id>
    <content type="html"><![CDATA[<p>Spring 3 added support for
<a href="http://download.oracle.com/javaee/6/api/javax/inject/package-summary.html">JSR 330 configuration</a>,
so you can use <strong>@Named</strong> and  <strong>@Inject</strong> instead of <strong>@Component</strong> and
<strong>@Autowired</strong>. Unfortunately Spring&#8217;s default scoping is not compatible with
JSR 330. Here is how it works:</p>

<!--more-->


<h2>Default behaviour</h2>

<p>By default Spring uses it&#8217;s default scoping behaviour on JSR 330 configured
beans like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Named</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingService</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means, that <em>GreetingService</em> will become a bean with singleton scope.</p>

<h2>JSR 330 scopes</h2>

<p>In difference to Spring JSR 330 defines, that the default scope of beans is
prototype, which means a new object is created everytime it will be injected
somewhere. If you want a different scoping you can create your own annotation for
this like descriped
<a href="http://download.oracle.com/javaee/6/api/javax/inject/Scope.html">here</a>. JSR 330
already comes with a predifined scope annotation for
<a href="http://download.oracle.com/javaee/6/api/javax/inject/Singleton.html">singletons</a>. To
make Spring behave as specified in JSR 330, you can use a different scope
resolver like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;my.package&quot;</span>
</span><span class='line'>  <span class="na">scope-resolver=</span><span class="s">&quot;org.springframework.context.annotation.Jsr330ScopeMetadataResolver&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this additional configuration, will make the above <em>GreetingService</em> bean
prototype scoped. To make it a singleton bean again, you will need to use the
singleton scope annotation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Named</span>
</span><span class='line'><span class="nd">@Singleton</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingService</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Custom scopes for JSR 330</h2>

<p>Spring comes with further scopes like <em>request</em> or <em>session</em>. JSR 330 does not
support them out of the box. You will have to create your own annotations for
this. Let&#8217;s look, how to do this for the <em>request</em> scope.</p>

<ol>
<li>Create your own scope annotation:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Scope</span>
</span><span class='line'><span class="nd">@Documented</span>
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Request</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Extend <em>Jsr330ScopeMetadataResolver</em> to map your annotation on Spring&#8217;s
scope:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomScopeMetadataResolver</span> <span class="kd">extends</span> <span class="n">Jsr330ScopeMetadataResolver</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Jsr330SpringScopeMetadataResolver</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">registerScope</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">WebApplicationContext</span><span class="o">.</span><span class="na">SCOPE_REQUEST</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Use your custom resolver in your Spring configuration:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;my.package&quot;</span>
</span><span class='line'>  <span class="na">scope-resolver=</span><span class="s">&quot;my.resolver.package.CustomScopeMetadataResolver&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above sample will make all beans, that are annotated with your own
<strong>@Request</strong> annotation request scoped.</p>
]]></content>
  </entry>
  
</feed>
